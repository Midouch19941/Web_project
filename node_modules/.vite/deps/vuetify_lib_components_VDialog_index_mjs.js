import {
  VDialogTransition
} from "./chunk-WRWIXHE4.js";
import {
  VOverlay
} from "./chunk-M5JBXWB6.js";
import "./chunk-RLGXE5Z7.js";
import "./chunk-K3F4HPYD.js";
import {
  makeTransitionProps
} from "./chunk-HFUZXYFA.js";
import "./chunk-GJUIDGFM.js";
import {
  useProxiedModel
} from "./chunk-HHNAWU4B.js";
import {
  makeDimensionProps,
  useDimension
} from "./chunk-DEMBA73I.js";
import "./chunk-MHPOZZQY.js";
import "./chunk-PMJZUFQ6.js";
import {
  IN_BROWSER,
  genericComponent
} from "./chunk-4GFONREX.js";
import {
  createVNode,
  mergeProps,
  nextTick,
  ref,
  watch
} from "./chunk-OY7IASPU.js";
import {
  __spreadValues,
  init_define_process_env
} from "./chunk-G7U5YDWW.js";

// dep:vuetify_lib_components_VDialog_index_mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VDialog/index.mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VDialog/VDialog.mjs
init_define_process_env();
import "C:/Users/medme/OneDrive/Bureau/Projet paresseux/front-end/node_modules/vuetify/lib/components/VDialog/VDialog.css";
var VDialog = genericComponent()({
  name: "VDialog",
  inheritAttrs: false,
  props: __spreadValues(__spreadValues({
    fullscreen: Boolean,
    origin: {
      type: String,
      default: "center center"
    },
    retainFocus: {
      type: Boolean,
      default: true
    },
    scrollable: Boolean,
    modelValue: Boolean
  }, makeDimensionProps({
    width: "auto"
  })), makeTransitionProps({
    transition: {
      component: VDialogTransition
    }
  })),
  emits: {
    "update:modelValue": (value) => true
  },
  setup(props, _ref) {
    let {
      attrs,
      slots
    } = _ref;
    const isActive = useProxiedModel(props, "modelValue");
    const {
      dimensionStyles
    } = useDimension(props);
    const overlay = ref();
    function onFocusin(e) {
      var _overlay$value;
      const before = e.relatedTarget;
      const after = e.target;
      if (before !== after && (_overlay$value = overlay.value) != null && _overlay$value.contentEl && ![document, overlay.value.contentEl].includes(after) && !overlay.value.contentEl.contains(after)) {
        const focusable = [...overlay.value.contentEl.querySelectorAll('button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])')].filter((el) => !el.hasAttribute("disabled"));
        if (!focusable.length)
          return;
        const firstElement = focusable[0];
        const lastElement = focusable[focusable.length - 1];
        if (before === firstElement) {
          lastElement.focus();
        } else {
          firstElement.focus();
        }
      }
    }
    if (IN_BROWSER) {
      watch(() => isActive.value && props.retainFocus, (val) => {
        val ? document.addEventListener("focusin", onFocusin) : document.removeEventListener("focusin", onFocusin);
      }, {
        immediate: true
      });
    }
    watch(isActive, async (val) => {
      await nextTick();
      if (val) {
        var _contentEl;
        (_contentEl = overlay.value.contentEl) == null ? void 0 : _contentEl.focus({
          preventScroll: true
        });
      } else {
        var _activatorEl;
        (_activatorEl = overlay.value.activatorEl) == null ? void 0 : _activatorEl.focus({
          preventScroll: true
        });
      }
    });
    return () => {
      return createVNode(VOverlay, mergeProps({
        "modelValue": isActive.value,
        "onUpdate:modelValue": ($event) => isActive.value = $event,
        "class": ["v-dialog", {
          "v-dialog--fullscreen": props.fullscreen,
          "v-dialog--scrollable": props.scrollable
        }],
        "style": dimensionStyles.value,
        "transition": props.transition,
        "ref": overlay,
        "aria-role": "dialog",
        "aria-modal": "true",
        "activatorProps": {
          "aria-haspopup": "dialog",
          "aria-expanded": String(isActive.value)
        }
      }, attrs), {
        default: slots.default,
        activator: slots.activator
      });
    };
  }
});
export {
  VDialog
};
//# sourceMappingURL=vuetify_lib_components_VDialog_index_mjs.js.map
