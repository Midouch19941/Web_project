{
  "version": 3,
  "sources": ["dep:vuetify_lib_components_VDialog_index_mjs", "../../vuetify/src/components/VDialog/VDialog.tsx"],
  "sourcesContent": ["\nexport * from \"./node_modules/vuetify/lib/components/VDialog/index.mjs\"", "// Styles\nimport './VDialog.sass'\n\n// Components\nimport { VDialogTransition } from '@/components/transitions'\nimport { VOverlay } from '@/components/VOverlay'\n\n// Composables\nimport { makeDimensionProps, useDimension } from '@/composables/dimensions'\nimport { makeTransitionProps } from '@/composables/transition'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Utilities\nimport { nextTick, ref, watch } from 'vue'\nimport { genericComponent, IN_BROWSER } from '@/util'\n\n// Types\nimport type { OverlaySlots } from '@/components/VOverlay/VOverlay'\n\nexport const VDialog = genericComponent<new () => {\n  $slots: OverlaySlots\n}>()({\n  name: 'VDialog',\n\n  inheritAttrs: false,\n\n  props: {\n    fullscreen: Boolean,\n    origin: {\n      type: String,\n      default: 'center center',\n    },\n    retainFocus: {\n      type: Boolean,\n      default: true,\n    },\n    scrollable: Boolean,\n    modelValue: Boolean,\n\n    ...makeDimensionProps({ width: 'auto' }),\n    ...makeTransitionProps({\n      transition: { component: VDialogTransition },\n    }),\n  },\n\n  emits: {\n    'update:modelValue': (value: boolean) => true,\n  },\n\n  setup (props, { attrs, slots }) {\n    const isActive = useProxiedModel(props, 'modelValue')\n    const { dimensionStyles } = useDimension(props)\n\n    const overlay = ref<VOverlay>()\n    function onFocusin (e: FocusEvent) {\n      const before = e.relatedTarget as HTMLElement | null\n      const after = e.target as HTMLElement | null\n\n      if (\n        before !== after &&\n        overlay.value?.contentEl &&\n        // It isn't the document or the dialog body\n        ![document, overlay.value.contentEl].includes(after!) &&\n        // It isn't inside the dialog body\n        !overlay.value.contentEl.contains(after)\n        // We're the topmost dialog\n        // TODO: this.activeZIndex >= this.getMaxZIndex() &&\n        // It isn't inside a dependent element (like a menu)\n        // TODO: !this.getOpenDependentElements().some(el => el.contains(target))\n        // So we must have focused something outside the dialog and its children\n      ) {\n        const focusable = [...overlay.value.contentEl.querySelectorAll(\n          'button, [href], input, select, textarea, [tabindex]:not([tabindex=\"-1\"])'\n        )].filter(el => !el.hasAttribute('disabled')) as HTMLElement[]\n\n        if (!focusable.length) return\n\n        const firstElement = focusable[0]\n        const lastElement = focusable[focusable.length - 1]\n\n        if (before === firstElement) {\n          lastElement.focus()\n        } else {\n          firstElement.focus()\n        }\n      }\n    }\n\n    if (IN_BROWSER) {\n      watch(() => isActive.value && props.retainFocus, val => {\n        val\n          ? document.addEventListener('focusin', onFocusin)\n          : document.removeEventListener('focusin', onFocusin)\n      }, { immediate: true })\n    }\n\n    watch(isActive, async val => {\n      await nextTick()\n      if (val) {\n        overlay.value!.contentEl?.focus({ preventScroll: true })\n      } else {\n        overlay.value!.activatorEl?.focus({ preventScroll: true })\n      }\n    })\n\n    return () => {\n      return (\n        <VOverlay\n          v-model={ isActive.value }\n          class={[\n            'v-dialog',\n            {\n              'v-dialog--fullscreen': props.fullscreen,\n              'v-dialog--scrollable': props.scrollable,\n            },\n          ]}\n          style={ dimensionStyles.value }\n          transition={ props.transition }\n          ref={ overlay }\n          aria-role=\"dialog\"\n          aria-modal=\"true\"\n          activatorProps={{\n            'aria-haspopup': 'dialog',\n            'aria-expanded': String(isActive.value),\n          }}\n          { ...attrs }\n          v-slots={{\n            default: slots.default,\n            activator: slots.activator,\n          }}\n        />\n      )\n    }\n  },\n})\n\nexport type VDialog = InstanceType<typeof VDialog>\n"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;ACCA;AAkBO,IAAM,UAAU,iBAAgB,EAElC;EACH,MAAM;EAEN,cAAc;EAEd,OAAO;IACL,YAAY;IACZ,QAAQ;MACN,MAAM;MACN,SAAS;IAFH;IAIR,aAAa;MACX,MAAM;MACN,SAAS;IAFE;IAIb,YAAY;IACZ,YAAY;KAET,mBAAmB;IAAE,OAAO;EAAT,CAAD,IAClB,oBAAoB;IACrB,YAAY;MAAE,WAAW;IAAb;EADS,CAAD;EAKxB,OAAO;IACL,qBAAsB,WAAmB;EADpC;EAIP,MAAO,OAAF,MAA2B;AAAA,QAAlB;MAAE;MAAO;QAAS;AAC9B,UAAM,WAAW,gBAAgB,OAAO,YAAR;AAChC,UAAM;MAAE;QAAoB,aAAa,KAAD;AAExC,UAAM,UAAU,IAAG;AACnB,uBAAoB,GAAe;AAAA,UAAA;AACjC,YAAM,SAAS,EAAE;AACjB,YAAM,QAAQ,EAAE;AAEhB,UACE,WAAW,SAAX,kBACA,QAAQ,UADR,QACA,eAAe,aAEf,CAAC,CAAC,UAAU,QAAQ,MAAM,SAAzB,EAAoC,SAAS,KAA7C,KAED,CAAC,QAAQ,MAAM,UAAU,SAAS,KAAjC,GAMD;AACA,cAAM,YAAY,CAAC,GAAG,QAAQ,MAAM,UAAU,iBAC5C,0EADoB,CAAJ,EAEf,OAAO,QAAM,CAAC,GAAG,aAAa,UAAhB,CAFC;AAIlB,YAAI,CAAC,UAAU;AAAQ;AAEvB,cAAM,eAAe,UAAU;AAC/B,cAAM,cAAc,UAAU,UAAU,SAAS;AAEjD,YAAI,WAAW,cAAc;AAC3B,sBAAY,MAAZ;QACD,OAAM;AACL,uBAAa,MAAb;QACD;MACF;IACF;AAED,QAAI,YAAY;AACd,YAAM,MAAM,SAAS,SAAS,MAAM,aAAa,SAAO;AACtD,cACI,SAAS,iBAAiB,WAAW,SAArC,IACA,SAAS,oBAAoB,WAAW,SAAxC;MACL,GAAE;QAAE,WAAW;MAAb,CAJE;IAKN;AAED,UAAM,UAAU,OAAM,QAAO;AAC3B,YAAM,SAAQ;AACd,UAAI,KAAK;AAAA,YAAA;AACP,QAAA,cAAA,QAAQ,MAAO,cAAf,OAAA,SAAA,WAA0B,MAAM;UAAE,eAAe;QAAjB,CAAhC;MACD,OAAM;AAAA,YAAA;AACL,QAAA,gBAAA,QAAQ,MAAO,gBAAf,OAAA,SAAA,aAA4B,MAAM;UAAE,eAAe;QAAjB,CAAlC;MACD;IACF,CAPI;AASL,WAAO,MAAM;AACX,aAAA,YAAA,UAAA,WAAA;QAAA,cAEc,SAAS;QAFvB,uBAAA,YAEc,SAAS,QAFvB;QAAA,SAGW,CACL,YACA;UACE,wBAAwB,MAAM;UAC9B,wBAAwB,MAAM;QAFhC,CAFK;QAHX,SAUY,gBAAgB;QAV5B,cAWiB,MAAM;QAXvB,OAYU;QAZV,aAac;QAbd,cAce;QAdf,kBAeoB;UACd,iBAAiB;UACjB,iBAAiB,OAAO,SAAS,KAAV;QAFT;MAfpB,GAmBS,KAnBT,GAoBa;QACP,SAAS,MAAM;QACf,WAAW,MAAM;MAFV,CApBb;IA0BD;EACF;AAhHE,CAFkC;",
  "names": []
}
