import {
  useLocale
} from "./chunk-EJ7AMXVC.js";
import {
  useRtl
} from "./chunk-K3F4HPYD.js";
import {
  makeRoundedProps,
  useRounded
} from "./chunk-HNYYUVMS.js";
import {
  VIcon
} from "./chunk-SAIXJAQK.js";
import {
  makeTagProps
} from "./chunk-LGIRKCR2.js";
import {
  MaybeTransition,
  makeTransitionProps
} from "./chunk-HFUZXYFA.js";
import {
  useBackgroundColor,
  useTextColor
} from "./chunk-MHPOZZQY.js";
import "./chunk-K7IEL5TN.js";
import {
  makeThemeProps,
  useTheme
} from "./chunk-PMJZUFQ6.js";
import {
  convertToUnit,
  defineComponent,
  pick
} from "./chunk-4GFONREX.js";
import {
  computed,
  createVNode,
  mergeProps,
  toRef,
  vShow,
  withDirectives
} from "./chunk-OY7IASPU.js";
import {
  __spreadValues,
  init_define_process_env
} from "./chunk-G7U5YDWW.js";

// dep:vuetify_lib_components_VBadge_index_mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VBadge/index.mjs
init_define_process_env();

// node_modules/vuetify/lib/components/VBadge/VBadge.mjs
init_define_process_env();
import "C:/Users/medme/OneDrive/Bureau/Projet paresseux/front-end/node_modules/vuetify/lib/components/VBadge/VBadge.css";
var VBadge = defineComponent({
  name: "VBadge",
  inheritAttrs: false,
  props: __spreadValues(__spreadValues(__spreadValues(__spreadValues({
    bordered: Boolean,
    color: String,
    content: [Number, String],
    dot: Boolean,
    floating: Boolean,
    icon: String,
    inline: Boolean,
    label: {
      type: String,
      default: "$vuetify.badge"
    },
    location: {
      type: String,
      default: "top-end",
      validator: (value) => {
        const [vertical, horizontal] = (value != null ? value : "").split("-");
        return ["top", "bottom"].includes(vertical) && ["start", "end"].includes(horizontal);
      }
    },
    max: [Number, String],
    modelValue: {
      type: Boolean,
      default: true
    },
    offsetX: [Number, String],
    offsetY: [Number, String],
    textColor: String
  }, makeRoundedProps()), makeTagProps()), makeThemeProps()), makeTransitionProps({
    transition: "scale-rotate-transition"
  })),
  setup(props, ctx) {
    const {
      backgroundColorClasses,
      backgroundColorStyles
    } = useBackgroundColor(toRef(props, "color"));
    const {
      isRtl
    } = useRtl();
    const {
      roundedClasses
    } = useRounded(props);
    const {
      t
    } = useLocale();
    const {
      textColorClasses,
      textColorStyles
    } = useTextColor(toRef(props, "textColor"));
    const {
      themeClasses
    } = useTheme();
    const position = computed(() => {
      return props.floating ? props.dot ? 2 : 4 : props.dot ? 8 : 12;
    });
    function calculatePosition(offset) {
      return `calc(100% - ${convertToUnit(position.value + parseInt(offset != null ? offset : 0, 10))})`;
    }
    const locationStyles = computed(() => {
      var _props$location;
      const [vertical, horizontal] = ((_props$location = props.location) != null ? _props$location : "").split("-");
      const styles = {
        bottom: "auto",
        left: "auto",
        right: "auto",
        top: "auto"
      };
      if (!props.inline) {
        const isRight = isRtl.value && horizontal === "end" || !isRtl.value && horizontal === "start";
        styles[isRight ? "right" : "left"] = calculatePosition(props.offsetX);
        styles[vertical === "top" ? "bottom" : "top"] = calculatePosition(props.offsetY);
      }
      return styles;
    });
    return () => {
      var _ctx$slots$default, _ctx$slots, _ctx$slots$badge, _ctx$slots2;
      const value = Number(props.content);
      const content = !props.max || isNaN(value) ? props.content : value <= props.max ? value : `${props.max}+`;
      const [badgeAttrs, attrs] = pick(ctx.attrs, ["aria-atomic", "aria-label", "aria-live", "role", "title"]);
      return createVNode(props.tag, mergeProps({
        "class": ["v-badge", {
          "v-badge--bordered": props.bordered,
          "v-badge--dot": props.dot,
          "v-badge--floating": props.floating,
          "v-badge--inline": props.inline
        }]
      }, attrs), {
        default: () => [createVNode("div", {
          "class": "v-badge__wrapper"
        }, [(_ctx$slots$default = (_ctx$slots = ctx.slots).default) == null ? void 0 : _ctx$slots$default.call(_ctx$slots), createVNode(MaybeTransition, {
          "transition": props.transition
        }, {
          default: () => [withDirectives(createVNode("span", mergeProps({
            "class": ["v-badge__badge", backgroundColorClasses.value, roundedClasses.value, textColorClasses.value, themeClasses.value],
            "style": [backgroundColorStyles.value, locationStyles.value, textColorStyles.value],
            "aria-atomic": "true",
            "aria-label": t(props.label, value),
            "aria-live": "polite",
            "role": "status"
          }, badgeAttrs), [props.dot ? void 0 : ctx.slots.badge ? (_ctx$slots$badge = (_ctx$slots2 = ctx.slots).badge) == null ? void 0 : _ctx$slots$badge.call(_ctx$slots2) : props.icon ? createVNode(VIcon, {
            "icon": props.icon
          }, null) : createVNode("span", {
            "class": "v-badge__content"
          }, [content])]), [[vShow, props.modelValue]])]
        })])]
      });
    };
  }
});
export {
  VBadge
};
//# sourceMappingURL=vuetify_lib_components_VBadge_index_mjs.js.map
