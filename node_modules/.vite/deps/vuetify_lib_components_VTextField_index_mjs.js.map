{
  "version": 3,
  "sources": ["dep:vuetify_lib_components_VTextField_index_mjs", "../../vuetify/src/components/VTextField/VTextField.tsx"],
  "sourcesContent": ["\nexport * from \"./node_modules/vuetify/lib/components/VTextField/index.mjs\"", "// Styles\nimport './VTextField.sass'\n\n// Components\nimport { filterInputProps, makeVInputProps, VInput } from '@/components/VInput/VInput'\nimport { filterFieldProps, makeVFieldProps, VField } from '@/components/VField/VField'\nimport { VCounter } from '@/components/VCounter'\n\n// Composables\nimport { useForwardRef } from '@/composables/forwardRef'\nimport { useProxiedModel } from '@/composables/proxiedModel'\n\n// Directives\nimport Intersect from '@/directives/intersect'\n\n// Utilities\nimport { computed, nextTick, ref } from 'vue'\nimport { filterInputAttrs, genericComponent, useRender } from '@/util'\n\n// Types\nimport type { PropType } from 'vue'\nimport type { VInputSlots } from '@/components/VInput/VInput'\nimport type { VFieldSlots } from '@/components/VField/VField'\n\nconst activeTypes = ['color', 'file', 'time', 'date', 'datetime-local', 'week', 'month']\n\nexport const VTextField = genericComponent<new <T>() => {\n  $slots: VInputSlots & VFieldSlots\n}>()({\n  name: 'VTextField',\n\n  directives: { Intersect },\n\n  inheritAttrs: false,\n\n  props: {\n    autofocus: Boolean,\n    counter: [Boolean, Number, String] as PropType<true | number | string>,\n    counterValue: Function as PropType<(value: any) => number>,\n    hint: String,\n    persistentHint: Boolean,\n    prefix: String,\n    placeholder: String,\n    persistentPlaceholder: Boolean,\n    persistentCounter: Boolean,\n    suffix: String,\n    type: {\n      type: String,\n      default: 'text',\n    },\n\n    ...makeVInputProps(),\n    ...makeVFieldProps(),\n  },\n\n  emits: {\n    'click:append': (e: MouseEvent) => true,\n    'click:append-inner': (e: MouseEvent) => true,\n    'click:clear': (e: MouseEvent) => true,\n    'click:control': (e: MouseEvent) => true,\n    'click:input': (e: MouseEvent) => true,\n    'click:prepend': (e: MouseEvent) => true,\n    'click:prepend-inner': (e: MouseEvent) => true,\n    'update:modelValue': (val: string) => true,\n  },\n\n  setup (props, { attrs, emit, slots }) {\n    const model = useProxiedModel(props, 'modelValue')\n    const counterValue = computed(() => {\n      return typeof props.counterValue === 'function'\n        ? props.counterValue(model.value)\n        : (model.value ?? '').toString().length\n    })\n    const max = computed(() => {\n      if (attrs.maxlength) return attrs.maxlength as undefined\n\n      if (\n        !props.counter ||\n        (typeof props.counter !== 'number' &&\n        typeof props.counter !== 'string')\n      ) return undefined\n\n      return props.counter\n    })\n\n    function onIntersect (\n      isIntersecting: boolean,\n      entries: IntersectionObserverEntry[]\n    ) {\n      if (!props.autofocus || !isIntersecting) return\n\n      (entries[0].target as HTMLInputElement)?.focus?.()\n    }\n\n    const vInputRef = ref<VInput>()\n    const vFieldRef = ref<VInput>()\n    const isFocused = ref(false)\n    const inputRef = ref<HTMLInputElement>()\n    const isActive = computed(() => (\n      activeTypes.includes(props.type) ||\n      props.persistentPlaceholder ||\n      isFocused.value\n    ))\n    const messages = computed(() => {\n      return props.messages.length\n        ? props.messages\n        : (isFocused.value || props.persistentHint) ? props.hint : ''\n    })\n    function onFocus () {\n      if (inputRef.value !== document.activeElement) {\n        inputRef.value?.focus()\n      }\n\n      if (!isFocused.value) isFocused.value = true\n    }\n    function onControlClick (e: MouseEvent) {\n      onFocus()\n\n      emit('click:control', e)\n    }\n    function onClear (e: MouseEvent) {\n      e.stopPropagation()\n\n      onFocus()\n\n      nextTick(() => {\n        model.value = ''\n\n        emit('click:clear', e)\n      })\n    }\n\n    useRender(() => {\n      const hasCounter = !!(slots.counter || props.counter || props.counterValue)\n      const [rootAttrs, inputAttrs] = filterInputAttrs(attrs)\n      const [{ modelValue: _, ...inputProps }] = filterInputProps(props)\n      const [fieldProps] = filterFieldProps(props)\n\n      return (\n        <VInput\n          ref={ vInputRef }\n          v-model={ model.value }\n          class={[\n            'v-text-field',\n            {\n              'v-text-field--persistent-placeholder': props.persistentPlaceholder,\n              'v-text-field--prefixed': props.prefix,\n              'v-text-field--suffixed': props.suffix,\n              'v-text-field--flush-details': ['plain', 'underlined'].includes(props.variant),\n            },\n          ]}\n          onClick:prepend={ (e: MouseEvent) => emit('click:prepend', e) }\n          onClick:append={ (e: MouseEvent) => emit('click:append', e) }\n          { ...rootAttrs }\n          { ...inputProps }\n          messages={ messages.value }\n        >\n          {{\n            ...slots,\n            default: ({\n              isDisabled,\n              isDirty,\n              isReadonly,\n              isValid,\n            }) => (\n              <VField\n                ref={ vFieldRef }\n                onMousedown={ (e: MouseEvent) => {\n                  if (e.target === inputRef.value) return\n\n                  e.preventDefault()\n                }}\n                onClick:control={ onControlClick }\n                onClick:clear={ onClear }\n                onClick:prependInner={ (e: MouseEvent) => emit('click:prepend-inner', e) }\n                onClick:appendInner={ (e: MouseEvent) => emit('click:append-inner', e) }\n                role=\"textbox\"\n                { ...fieldProps }\n                active={ isActive.value || isDirty.value }\n                dirty={ isDirty.value || props.dirty }\n                focused={ isFocused.value }\n                error={ isValid.value === false }\n              >\n                {{\n                  ...slots,\n                  default: ({\n                    props: { class: fieldClass, ...slotProps },\n                  }) => {\n                    return (\n                      <>\n                        { props.prefix && (\n                          <span class=\"v-text-field__prefix\">\n                            { props.prefix }\n                          </span>\n                        ) }\n\n                        <div\n                          class={ fieldClass }\n                          onClick={ e => emit('click:input', e) }\n                        >\n                          { slots.default?.() }\n\n                          <input\n                            ref={ inputRef }\n                            v-model={ model.value }\n                            v-intersect={[{\n                              handler: onIntersect,\n                            }, null, ['once']]}\n                            autofocus={ props.autofocus }\n                            readonly={ isReadonly.value }\n                            disabled={ isDisabled.value }\n                            placeholder={ props.placeholder }\n                            size={ 1 }\n                            type={ props.type }\n                            onFocus={ onFocus }\n                            onBlur={ () => (isFocused.value = false) }\n                            { ...slotProps }\n                            { ...inputAttrs }\n                          />\n                        </div>\n\n                        { props.suffix && (\n                          <span class=\"v-text-field__suffix\">\n                            { props.suffix }\n                          </span>\n                        ) }\n                      </>\n                    )\n                  },\n                }}\n              </VField>\n            ),\n            details: hasCounter ? () => (\n              <>\n                <span />\n\n                <VCounter\n                  active={ props.persistentCounter || isFocused.value }\n                  value={ counterValue.value }\n                  max={ max.value }\n                  v-slots={ slots.counter }\n                />\n              </>\n            ) : undefined,\n          }}\n        </VInput>\n      )\n    })\n\n    return useForwardRef({}, vInputRef, vFieldRef, inputRef)\n  },\n})\n\nexport type VTextField = InstanceType<typeof VTextField>\n"],
  "mappings": "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",
  "names": []
}
